#1. initial setup
github.com/new
mkdir instaclone
cd instaclone
code .
git init
git remote add origin {https://~ github repo}
vscode extension gitignore 
->설치 후 command palette에서 gitignore->node 입력 해서 추가)
npm init -y
package.json에서 git repo 내용이 포함되어 있음을 확인
git add .
git commit -m "Backend setup"
git push origin maser

#2. Apollo server
npm i apollo-server graphql
server.js 작성

npm i nodemon --save-dev (파일 저장하면 서버 재시작)
> package.json
"scripts":{
    "dev": "nodemon --exec node server.js"
}
npm run dev 로 확인

#3. Babel node (Node 버전에 구애받지 않고 최신 자바스크립트 사용하기 위해 설치하고 셋업)
npm install --save-dev @babel/core
npm install @babel/preset-env --save-dev
touch babel.config.json
{
  "presets": ["@babel/preset-env"]
}
-> production 에서는 babel 사용하지 않는다 (이미 babel로 컴파일된 자바스크립트 코드를 사용할것이므로)
npm i @babel/node --save-dev
> package.json
"scripts":{
    "dev": "nodemon --exec babel-node server" 로 수정
}

# Database (Postgresql)
sudo apt update
sudo apt install postgresql postgresql-contrib
psql --version(버전번호 확인)
sudo service postgresql start (status/start/stop 으로 시작및중지)
sudo -u postgres psql
postgres=# create user {username} password 'xxxx';
postgres=# alter user {username} with createdb replication (권한부여)
postgres=# create database db_instaclone owner={name};
윈도우즈에 pgamin4 설치(UI)

# Prisma (node와 DB 연결해주는 ORM)
npm install prisma -D
npx prisma init
prisma
npx prisma migrate dev --preview-feature
>schema.prisma에 생성할 모델 정의
>.env에 DB정보 수정

# Architecture (divide and conquer)
server.js (apollo-server)
client.js (prisma/client)
npm install graphql-tools@latest (latest버전 설치필요. 4.x 버전 설치되면 loadFileSync 못찾음)
schema.js (graphql-tools 사용해서 아래 movies 폴더의 내용들을 합친다.)
movies폴더
-movies.typeDefs.js
-movies.queries.js
-movies.mutations.js

# dotenv 사용 (.env 가상환경 사용하기)
npm i dotenv
server.js 맨 위에 require("dotenv").config()